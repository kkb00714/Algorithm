'''
시뮬레이션과 완전탐색 유형!

여행가 A는 N x N 크기의 정사각형 공간 위에 서 있다.
이 공간은 1 x 1 크기의 정사각형으로 나누어져 있다.

가장 왼쪽 위 좌표는 (1,1) 이며, 가장 오른쪽 아래 좌표는 (N, N)에 해당.
여행가 A는 상, 하, 좌, 우 방향으로 이동할 수 있으며 시작 좌표는 항상 (1,1).

계획서에는 하나의 줄에 띄어쓰기를 기준으로 하여 L, R, U, D중
하나의 문자가 반복적으로 적혀 있다.
L: 왼쪽 / R: 오른쪽 / U: 위 / D: 아래

※ 단, 정사각형 공간을 벗어나는 움직임은 무시된다.


-----

첫째 줄에 공간의 크기를 나타내는 N이 주어짐. (1 <= N <= 100)
둘째 줄에 여행가 A가 이동할 계획서 내용이 주어짐. (1 <= 이동횟수 <= 100)

첫째 줄에 여행가 A가 최종적으로 도착할 지점의 좌표 (X, Y)를 공백 기준으로 구분하여 출력

입력 : 
5
R R R U D D

출력 : 
3 4

'''

n = int(input())
x, y = 1, 1
plans = input().split()

# 상, 하, 좌, 우 // U, D, L, R
# x => 가로 / y => 세로
dx = [0, 0, -1, 1]
dy = [-1, 1, 0, 0]
move_types = ['U', 'D' , 'L',  'R']

# 이동 계획 하나씩 확인
for plan in plans:
    # 이동 후 좌표 구하기 
    for i in range(len(move_types)):
        if plan == move_types[i]:
            nx = x + dx[i]
            ny = y + dy[i]
        # 공간을 벗어나는 경우는 무시
    if nx < 1 or ny < 1 or nx > n or ny > n:
        continue
    # 이동 수행
    x, y = nx, ny
print(x, y)
