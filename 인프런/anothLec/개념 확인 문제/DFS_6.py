# 인프런 DFS 문제 2

# N개의 원소로 구성된 자연수 집합이 주어진다.
# 이 집합을 두 개의 부분집합으로 나누었을 때
# 두 부분집합의 원소의 합이 서로 같은 경우가 존재하면 “YES"를 출력하고, 
# 그렇지 않으면 ”NO"를 출력하는 프로그램을 작성한다.

# 둘로 나뉘는 두 부분집합은 서로소 집합이며, 
# 두 부분집합을 합하면 입력으로 주어진 원래의 집합이 되어야 한다.

# 예를 들어 {1, 3, 5, 6, 7, 10}이 입력되면 {1, 3, 5, 7} = {6, 10} 으로 
# 두 부분집합의 합이 16으로 같은 경우가 존재하는 것을 알 수 있다.

# 입력
# 첫 번째 줄에 자연수 N(1<=N<=10)이 주어진다.
# 두 번째 줄에 집합의 원소 N개가 주어진다. 각 원소는 중복되지 않는다.
# 6
# 1 3 5 6 7 10 

# 출력
# 첫 번째 줄에 “YES" 또는 ”NO"를 출력한다.
# YES

import sys

# sum : 점차 더해지는 부분집합의 합
def dfs(idx, sum): 
    # 부분집합의 절반이 total의 절반을 넘으면 중단. (탐색 범위가 줄어들음)
    if sum > total//2:
        return
    
    if idx == n:
        # 부분집합의 합이 total-sum과 같으면 YES.
        if sum == (total-sum):
            print("YES")
            # 프로그램 종료
            sys.exit(0) 
    else:
        dfs(idx+1, sum+a[idx]) # 현재 원소 포함
        dfs(idx+1, sum) # 현재 원소 포함하지 않음.

n = int(input())
a = list(map(int, input().split()))
total = sum(a)
dfs(0, 0)
print("NO")