# 26. 회의실 배정(그리디)

# 문제
# 한 개의 회의실이 있는데 이를 사용하고자 하는 n개의 회의들에 
# 대하여 회의실 사용표를 만들려고 한다. 

# 각 회의에 대해 시작시간과 끝나는 시간이 주어져 있고, 
# 각 회의가 겹치지 않게 하면서 회의실을 사용할 수 있는 
# 최대수의 회의를 찾아라. 단, 회의는 한번 시작하면 중간에 
# 중단될 수 없으며 한 회의가 끝나는 것과 동시에 
# 다음 회의가 시작될 수 있다.


# 입력 설명 
# 첫째 줄에 회의의 수 n(1<=n<=100,000)이 주어진다. 
# 둘째 줄부터 n+1 줄까지 각 회의의 정보가 주어지는데 
# 이것은 공백을 사이에 두고 회의의 시작시간과 
# 끝나는 시간이 주어진다.

# 출력 설명
# 첫째 줄에 최대 사용할 수 있는 회의 수를 출력하여라. 

# 입력 예제
# 5
# 1 4
# 2 3
# 3 5
# 4 6
# 5 7

# 출력 예제
# 3


# 그리디 알고리즘이란?
# 문제를 풀어나가는 단계에 있어서
# 현재 가장 좋은 것을 판별하는 것
# => 최적해를 구하는 데에 사용되는 근사적인 방법

n = int(input())
meeting = []
for _ in range(n):
    s, e = map(int, input().split())
    meeting.append((s, e))
    # 튜플 형태로 리스트에 자료 선언

meeting.sort(key = lambda x : (x[1], x[0]))
# 정렬 순위를 바꿈 => s가 x[1] 위치로, e가 x[0] 위치로
# => 끝나는 원소를 기준으로 정렬함
# => 회의의 종료 시간을 기준으로 정렬됨. 
# (종료 시간이 같을 경우 시간을 기준으로 오름차순으로 정렬)

et = 0 # 끝나는 시간
cnt = 0 # 진행 회의 횟수
for s, e in meeting:
    # 
    if s >= et:
    # 진행했던 회의의 끝나는 시간보다 
    # 그 회의의 시작시간이 크거나 같으면 그 회의의 끝나는 시간을
    # et로 지정, 이후 카운팅
        et = e
        cnt += 1
print(cnt)



